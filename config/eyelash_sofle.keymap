#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 25   // 10

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include "alias_sofle.h"
#include <behaviors.dtsi>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

&msc {
    acceleration-exponent = <1>;      // 0
    time-to-max-speed-ms = <100>;       // 300
    delay-ms = <0>;                   // 0
};

&mmv {
    time-to-max-speed-ms = <500>;
    acceleration-exponent = <1>;
    trigger-period-ms = <16>;
};

// Homerow mods

#define HRM_BEHAVIOR "tap-preferred"
#define HRM_TAPPING_TERM_MS 180
#define HRM_REQUIRE_PRIOR_IDLE_MS 100
#define HRM_QUICK_TAP_MS 160

/ {
    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <100>;
    };

    hml: homerow_mods_left {
        compatible = "zmk,behavior-hold-tap";
        label = "HOMEROW_MODS_LEFT";
        flavor =
        HRM_BEHAVIOR;
        tapping-term-ms = <HRM_TAPPING_TERM_MS>;
        quick-tap-ms = <HRM_QUICK_TAP_MS>;
        require-prior-idle-ms = <HRM_REQUIRE_PRIOR_IDLE_MS>;
        hold-trigger-key-positions = <KEYS_R KEYS_T>;
        hold-trigger-on-release;
        #binding-cells = <2>;
        bindings = <&kp>, <&kp>;
    };

    hmr: homerow_mods_right {
        compatible = "zmk,behavior-hold-tap";
        label = "HOMEROW_MODS_RIGHT";
        flavor =
        HRM_BEHAVIOR;
        tapping-term-ms = <HRM_TAPPING_TERM_MS>;
        quick-tap-ms = <HRM_QUICK_TAP_MS>;
        require-prior-idle-ms = <HRM_REQUIRE_PRIOR_IDLE_MS>;
        hold-trigger-key-positions = <KEYS_L KEYS_T>;
        hold-trigger-on-release;
        #binding-cells = <2>;
        bindings = <&kp>, <&kp>;
    };

    exlamation_question_mark: exlamation_question_mark {
        compatible = "zmk,behavior-mod-morph";
        label = "EXLAMATION_QUESTION_MARK";
        bindings = <&kp LS(NUMBER_1)>, <&kp MINUS>;

        #binding-cells = <0>;
        mods = <(MOD_LSFT)>;
        keep-mods = <(MOD_LSFT)>;
    };

    thumb_layers: thumb_layers {
        compatible = "zmk,behavior-hold-tap";
        label = "THUMB_LAYERS";
        flavor =
        HRM_BEHAVIOR;
        tapping-term-ms = <HRM_TAPPING_TERM_MS>;
        quick-tap-ms = <HRM_QUICK_TAP_MS>;
        require-prior-idle-ms = <HRM_REQUIRE_PRIOR_IDLE_MS>;
        hold-trigger-on-release;
        #binding-cells = <2>;
        bindings = <&mo>, <&kp>;
    };

    behaviors {
        skq: sticky_key_quick_release {
            compatible = "zmk,behavior-sticky-key";
            #binding-cells = <1>;
            bindings = <&kp>;
            release-after-ms = <1000>;
            quick-release;
            ignore-modifiers;
        };

        bl_encoder: bl_encoder {
            compatible = "zmk,behavior-sensor-rotate";
            label = "BL_ENCODER";
            #sensor-binding-cells = <0>;
            bindings = <&rgb_ug RGB_BRI>, <&rgb_ug RGB_BRD>;
        };
    };

    combos {
        compatible = "zmk,combos";

        left_parenthesis {
            bindings = <&kp LS(N8)>;
            key-positions = <16 17>;
            layers = <0>;
            require-prior-idle-ms = <75>;
            timeout-ms = <50>;
        };

        right_parenthesis {
            bindings = <&kp LS(N9)>;
            key-positions = <23 24>;
            layers = <0>;
            require-prior-idle-ms = <75>;
            timeout-ms = <50>;
        };

        left_bracket {
            bindings = <&kp LA(N8)>;
            key-positions = <17 15>;
            timeout-ms = <50>;
            require-prior-idle-ms = <75>;
            layers = <0>;
        };

        right_bracket {
            bindings = <&kp LA(N9)>;
            key-positions = <23 25>;
            timeout-ms = <50>;
            require-prior-idle-ms = <75>;
            layers = <0>;
        };

        left_curly {
            bindings = <&kp LA(LS(N8))>;
            key-positions = <17 14>;
            timeout-ms = <50>;
            require-prior-idle-ms = <75>;
            layers = <0>;
        };

        right_curly {
            bindings = <&kp LA(N9)>;
            key-positions = <23 26>;
            timeout-ms = <50>;
            require-prior-idle-ms = <75>;
            layers = <0>;
        };

        less_than {
            bindings = <&kp LS(GRAVE)>;
            key-positions = <16 18>;
            timeout-ms = <50>;
            require-prior-idle-ms = <75>;
            layers = <0>;
        };

        greater_than {
            bindings = <&kp LS(GRAVE)>;
            key-positions = <24 22>;
            timeout-ms = <50>;
            require-prior-idle-ms = <75>;
            layers = <0>;
        };

        equal {
            bindings = <&kp LS(N0)>;
            key-positions = <5 3>;
            timeout-ms = <50>;
            require-prior-idle-ms = <75>;
            layers = <0>;
        };

        star {
            bindings = <&kp LS(BACKSLASH)>;
            key-positions = <17 18>;
            timeout-ms = <50>;
            require-prior-idle-ms = <75>;
            layers = <0>;
        };

        quote {
            bindings = <&kp LS(NUMBER_2)>;
            key-positions = <31 32>;
            timeout-ms = <50>;
            require-prior-idle-ms = <75>;
            layers = <0>;
        };

        hash {
            bindings = <&kp LS(NUMBER_3)>;
            key-positions = <32 30>;
            timeout-ms = <50>;
            require-prior-idle-ms = <75>;
            layers = <0>;
        };

        tilde {
            bindings = <&kp RA(RIGHT_BRACKET)>;
            key-positions = <1 2>;
            timeout-ms = <50>;
            require-prior-idle-ms = <75>;
            layers = <0>;
        };

        plus {
            bindings = <&kp MINUS>;
            key-positions = <3 4>;
            timeout-ms = <50>;
            require-prior-idle-ms = <75>;
            layers = <0>;
        };

        forward_slash {
            bindings = <&kp LS(N7)>;
            key-positions = <4 2>;
            timeout-ms = <50>;
            require-prior-idle-ms = <75>;
            layers = <0>;
        };

        backward_slash {
            bindings = <&kp LS(LA(N7))>;
            key-positions = <2 3>;
            timeout-ms = <50>;
            require-prior-idle-ms = <75>;
            layers = <0>;
        };

        one {
            bindings = <&kp NUMBER_1>;
            key-positions = <43 30>;
            timeout-ms = <50>;
            require-prior-idle-ms = <75>;
            layers = <0>;
        };

        two {
            bindings = <&kp NUMBER_2>;
            key-positions = <43 31>;
            timeout-ms = <50>;
            require-prior-idle-ms = <75>;
            layers = <0>;
        };

        three {
            bindings = <&kp NUMBER_3>;
            key-positions = <43 32>;
            timeout-ms = <50>;
            require-prior-idle-ms = <75>;
            layers = <0>;
        };

        four {
            bindings = <&kp NUMBER_4>;
            key-positions = <43 15>;
            timeout-ms = <50>;
            require-prior-idle-ms = <75>;
            layers = <0>;
        };

        five {
            bindings = <&kp N5>;
            key-positions = <43 16>;
            timeout-ms = <50>;
            require-prior-idle-ms = <75>;
            layers = <0>;
        };

        six {
            bindings = <&kp NUMBER_6>;
            key-positions = <43 17>;
            timeout-ms = <50>;
            require-prior-idle-ms = <75>;
            layers = <0>;
        };

        seven {
            bindings = <&kp N7>;
            key-positions = <43 2>;
            timeout-ms = <50>;
            require-prior-idle-ms = <75>;
            layers = <0>;
        };

        eight {
            bindings = <&kp N8>;
            key-positions = <43 3>;
            timeout-ms = <50>;
            require-prior-idle-ms = <75>;
            layers = <0>;
        };

        nine {
            bindings = <&kp N9>;
            key-positions = <43 4>;
            timeout-ms = <50>;
            require-prior-idle-ms = <75>;
            layers = <0>;
        };

        zero {
            bindings = <&kp N0>;
            key-positions = <43 5>;
            timeout-ms = <50>;
            require-prior-idle-ms = <75>;
            layers = <0>;
        };

        underscore {
            bindings = <&kp LS(FSLH)>;
            key-positions = <37 38>;
            timeout-ms = <50>;
            require-prior-idle-ms = <75>;
            layers = <0>;
        };

        colon {
            bindings = <&kp LS(PERIOD)>;
            key-positions = <38 39>;
            timeout-ms = <50>;
            require-prior-idle-ms = <75>;
            layers = <0>;
        };

        semi_colon {
            bindings = <&kp LS(COMMA)>;
            key-positions = <39 37>;
            timeout-ms = <50>;
            require-prior-idle-ms = <75>;
            layers = <0>;
        };

        at_sign {
            bindings = <&kp LA(NUMBER_2)>;
            key-positions = <30 31>;
            timeout-ms = <50>;
            require-prior-idle-ms = <75>;
            layers = <0>;
        };

        ampersand {
            bindings = <&kp LS(NUMBER_6)>;
            key-positions = <32 33>;
            timeout-ms = <50>;
            require-prior-idle-ms = <75>;
            layers = <0>;
        };

        percent {
            bindings = <&kp LS(N5)>;
            key-positions = <32 29>;
            timeout-ms = <50>;
            require-prior-idle-ms = <75>;
            layers = <0>;
        };

        pipe {
            bindings = <&kp LA(N7)>;
            key-positions = <33 31>;
            timeout-ms = <50>;
            require-prior-idle-ms = <75>;
            layers = <0>;
        };

        string_literal {
            bindings = <&kp LA(EQUAL)>;
            key-positions = <17 18>;
            timeout-ms = <50>;
            require-prior-idle-ms = <75>;
            layers = <0>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        DEFAULT {
            bindings = <
&kp NON_US_BSLH         &kp N1               &kp N2           &kp N3               &kp N4                 &kp N5                 &kp C_VOLUME_UP     &kp N6                 &kp N7                     &kp N8                  &kp N9            &kp N0               &kp MINUS
&caps_word              &kp Q                &kp W            &kp F                &kp P                  &kp B                  &kp C_VOL_DN        &kp J                  &kp L                      &kp U                   &kp Y             &kp LBKT             &kp SQT
&skq LEFT_SHIFT         &hml LEFT_CONTROL A  &hml LEFT_ALT R  &hml LEFT_GUI S      &hml LEFT_SHIFT T      &kp G                  &kp C_RW            &kp M                  &hmr LEFT_SHIFT N          &hmr LEFT_GUI E         &hmr LEFT_ALT I   &hmr LEFT_CONTROL O  &kp SEMI
&mt LEFT_GUI BACKSLASH  &kp Z                &kp X            &kp C                &kp D                  &kp V                  &kp C_FAST_FORWARD  &kp K                  &kp H                      &kp COMMA               &kp DOT           &kp FSLH             &exlamation_question_mark
&kp C_MUTE              &kp GRAVE            &kp LS(GRAVE)    &thumb_layers 5 ESC  &thumb_layers 1 SPACE  &thumb_layers 4 TAB    &kp C_PP            &thumb_layers 3 ENTER  &thumb_layers 2 BACKSPACE  &thumb_layers 6 DELETE  &kp LA(NUMBER_8)  &kp LA(NUMBER_9)
            >;

            sensor-bindings = <&scroll_encoder>;
            display-name = "DEFAULT";
        };

        LAYER1 {
            bindings = <
&trans        &kp F1            &kp F2        &kp F3        &kp F4                &kp F5       &mmv MOVE_UP     &kp F6      &kp F7    &kp F8         &kp F9        &kp F10    &trans
&trans        &trans            &mkp LCLK     &mkp MCLK     &mkp RCLK             &kp LG(X)    &mmv MOVE_DOWN   &trans      &trans    &trans         &trans        &trans     &trans
&kp TAB       &kp LEFT_CONTROL  &kp LEFT_ALT  &kp LEFT_GUI  &kp LEFT_SHIFT        &kp LG(C)    &mmv MOVE_LEFT   &kp LG(A)   &kp LEFT  &kp DOWN       &kp UP_ARROW  &kp RIGHT  &trans
&kp LC(SEMI)  &kp LG(A)         &kp LG(X)     &kp LG(C)     &kp LG(LS(NUMBER_4))  &kp LG(V)    &mmv MOVE_RIGHT  &kp INSERT  &kp HOME  &kp PAGE_DOWN  &kp PAGE_UP   &kp END    &trans
&kp C_MUTE    &trans            &trans        &trans        &none                 &trans       &mkp LCLK        &trans      &trans    &trans         &trans        &trans
            >;

            display-name = "LAYER1";
            sensor-bindings = <&scroll_encoder>;
        };

        LAYER2 {
            bindings = <
&kp TILDE              &kp F1      &kp F2        &kp F3         &kp F4        &kp F5       &mmv MOVE_UP     &kp F6  &kp F7  &kp F8   &kp F9   &kp F10  &trans
&kp NON_US_BACKSLASH   &kp COMMA   &kp N7        &kp N8         &kp N9        &kp N0       &mmv MOVE_DOWN   &trans  &trans  &kp F11  &kp F12  &trans   &trans
&kp LS(RIGHT_BRACKET)  &kp DOT     &kp NUMBER_4  &kp N5         &kp NUMBER_6  &kp MINUS    &mmv MOVE_LEFT   &trans  &trans  &trans   &trans   &trans   &trans
&kp RA(RIGHT_BRACKET)  &kp GRAVE   &kp NUMBER_1  &kp NUMBER_2   &kp NUMBER_3  &kp FSLH     &mmv MOVE_RIGHT  &trans  &trans  &trans   &trans   &trans   &trans
&trans                 &kp LA(N7)  &kp EQUAL     &kp LS(EQUAL)  &trans        &trans       &mkp LCLK        &trans  &none   &trans   &trans   &trans
            >;

            display-name = "LAYER2";
            sensor-bindings = <&scroll_encoder>;
        };

        LAYER3 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
            >;

            display-name = "LAYER3";
            sensor-bindings = <&scroll_encoder>;
        };

        LAYER4 {
            bindings = <
&trans                        &trans                        &trans                        &trans                        &trans                        &trans                      &trans  &trans                &trans                    &trans                          &trans                        &trans                     &trans
&kp LS(LA(LG(V)))             &kp LS(LA(LC(LG(NUMBER_1))))  &kp LS(LA(LC(LG(NUMBER_2))))  &kp LS(LA(LC(LG(NUMBER_3))))  &kp LS(LA(LC(LG(NUMBER_4))))  &kp LS(LA(LC(LG(N5))))      &trans  &trans                &trans                    &trans                          &trans                        &trans                     &trans
&kp LS(LA(LG(N0)))            &kp LS(LA(LG(NUMBER_1)))      &kp LS(LA(LG(NUMBER_2)))      &kp LS(LA(LG(NUMBER_3)))      &kp LS(LA(LG(NUMBER_4)))      &kp LS(LA(LG(NUMBER_5)))    &trans  &kp LS(LA(LG(LEFT)))  &kp LS(LA(LC(LG(LEFT))))  &kp LC(LG(LA(LS(DOWN_ARROW))))  &kp LS(LA(LG(LC(UP_ARROW))))  &kp LS(LA(LC(LG(RIGHT))))  &kp LS(LA(LG(RIGHT)))
&kp LS(LA(LG(LC(NUMBER_6))))  &kp LS(LA(LC(LG(N0))))        &kp LS(LA(LG(NUMBER_6)))      &kp LS(LA(LG(N7)))            &kp LS(LA(LG(N8)))            &kp LS(LA(LG(N9)))          &trans  &kp LS(LA(LG(N)))     &kp LS(LC(LA(LG(M))))     &kp LS(LA(LG(C)))               &kp LS(LA(LC(LG(R))))         &trans                     &trans
&trans                        &trans                        &trans                        &trans                        &trans                        &none                       &trans  &kp LG(W)             &kp LG(LA(H))             &kp LG(H)                       &trans                        &trans
            >;

            display-name = "LAYER4";
            sensor-bindings = <&scroll_encoder>;
        };

        LAYER5 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &kp C_VOLUME_UP     &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &kp C_VOL_DN        &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &kp C_REWIND        &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &kp C_FAST_FORWARD  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &none   &trans  &trans    &kp C_PLAY_PAUSE    &trans  &trans  &trans  &trans  &trans
            >;

            display-name = "LAYER5";
            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        LAYER6 {
            bindings = <
&soft_off        &trans        &trans        &trans        &trans        &trans          &trans  &trans  &trans  &trans      &trans  &trans  &trans
&trans           &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &trans  &trans  &trans  &trans      &trans  &trans  &trans
&trans           &trans        &trans        &trans        &trans        &trans          &trans  &trans  &trans  &bl BL_TOG  &trans  &trans  &trans
&trans           &trans        &trans        &trans        &trans        &trans          &trans  &trans  &trans  &trans      &trans  &trans  &trans
&rgb_ug RGB_TOG  &trans        &trans        &trans        &trans        &trans          &trans  &trans  &trans  &none       &trans  &trans
            >;

            display-name = "LAYER6";
            sensor-bindings = <&bl_encoder>;
        };
    };
};
